## @section Global parameters
## Please, note that this will override the parameters, including dependencies, configured to use the global value
##
global:
    auth:
      postgresPassword: "{{ ../values_postgresql.global.auth.postgresPssword }}"
      username:  "{{ ../values_postgresql.global.auth.username }}"
      password:  "{{ ../values_postgresql.global.auth.password }}"
      database:  "{{ ../values_postgresql.global.auth.postgresdatabase }}"
      existingSecret: ""
    ## @param global.postgresql.service.ports.postgresql PostgreSQL service port (overrides `service.ports.postgresql`)
    ##
    


auth:
  ## @param auth.enablePostgresUser Assign a password to the "postgres" admin user. Otherwise, remote access will be blocked for this user
  ##
  enablePostgresUser:  "{{ ../values_postgresql.auth.enablePostgresUser }}"
  ## @param auth.postgresPassword Password for the "postgres" admin user
  ##
  postgresPassword:  "{{ ../values_postgresql.auth.postgresPassword }}"
  ## @param auth.username Name for a custom user to create
  ##
  username: "{{ ../values_postgresql.auth.username }}"
  ## @param auth.password Password for the custom user to create
  ##
  password:  "{{ ../values_postgresql.auth.password }}"
  ## @param auth.database Name for a custom database to create
  ##
  database:  "{{ ../values_postgresql.auth.database }}"
  ## @param auth.replicationUsername Name of the replication user
  ##
  replicationUsername:  "{{ ../values_postgresql.auth.replicationUsername }}"
  ## @param auth.replicationPassword Password for the replication user
  ##
  replicationPassword: "{{ ../values_postgresql.auth.replicationPassword }}"
  ## @param auth.existingSecret Name of existing secret to use for PostgreSQL credentials
 
##
containerPorts:
  postgresql: "{{ ../values_postgresql.containerPorts.postgresql }}"


  ##
  service:
    ## @param primary.service.type Kubernetes Service type
    ##
    type: "{{ ../values_postgresql.containerPorts.service.type }}"
    ## @param primary.service.ports.postgresql PostgreSQL service port
    ##
    ports:
      postgresql: "{{ ../values_postgresql.containerPorts.service.ports.postgresql }}"
    ## Node ports to expose
    ## NOTE: choose port between <30000-32767>
    ## @param primary.service.nodePorts.postgresql Node port for PostgreSQL
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
    ##
  service:
    ## @param readReplicas.service.type Kubernetes Service type
    ##
    type: "{{ ../values_postgresql.containerPorts.service.type }}"
    ## @param readReplicas.service.ports.postgresql PostgreSQL service port
    ##
    ports:
      postgresql: "{{ ../values_postgresql.containerPorts.service.ports.postgresql }}"
data: ["pgweb","--host=yvtokan-test-postgresql","--port=5432","--user=admin","--pass=admin","--db=mydb","--ssl=disable","--listen=8082","|","echo"]